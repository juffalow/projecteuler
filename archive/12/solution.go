package main

import (
	"fmt"
)

/*

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?

https://projecteuler.net/problem=12

*/

func main() {
    var divisors int64
    var i int64
    
    divisors = 1
    i = 0
    
    for divisors <= 5 {
        i++
        divisors = getNumberOfDivisors(sumSequence(i))
    }
	fmt.Println(i)
    fmt.Println(divisors)
    fmt.Println(sumSequence(i))
}

func sumSequence(n int64) int64 {
    return (n * (n + 1)) / 2
}

// http://www.tech-thoughts-blog.com/2012/08/1-introduction-in-this-article-i-will.html
// http://www.wikihow.com/Determine-the-Number-of-Divisors-of-an-integer
func getNumberOfDivisors(number int64) int64 {
    var i int64
    var wasDivisor bool
    var result int64
    var q int64
    
    i = 2
    wasDivisor = false
    result = 1
    q = 0
    
    for number > 1 {
        if number % i == 0 {
            number /= i
            wasDivisor = true
            q++
        } else {
            i++
            if wasDivisor {
                result *= (q + 1)
                q = 0
                wasDivisor = false
            }
        }
    }
    
    result *= (q + 1)
    
    return result
}
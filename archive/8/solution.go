package main

import (
	"fmt"
	"strconv"
)

/*

The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?


https://projecteuler.net/problem=8

*/

func main() {
    var number []string
    var adjacentDigits int
    
    number = make([]string, 20)
    
    number[0] = "73167176531330624919225119674426574742355349194934"
    number[1] = "96983520312774506326239578318016984801869478851843"
    number[2] = "85861560789112949495459501737958331952853208805511"
    number[3] = "12540698747158523863050715693290963295227443043557"
    number[4] = "66896648950445244523161731856403098711121722383113"
    number[5] = "62229893423380308135336276614282806444486645238749"
    number[6] = "30358907296290491560440772390713810515859307960866"
    number[7] = "70172427121883998797908792274921901699720888093776"
    number[8] = "65727333001053367881220235421809751254540594752243"
    number[9] = "52584907711670556013604839586446706324415722155397"
    number[10] = "53697817977846174064955149290862569321978468622482"
    number[11] = "83972241375657056057490261407972968652414535100474"
    number[12] = "82166370484403199890008895243450658541227588666881"
    number[13] = "16427171479924442928230863465674813919123162824586"
    number[14] = "17866458359124566529476545682848912883142607690042"
    number[15] = "24219022671055626321111109370544217506941658960408"
    number[16] = "07198403850962455444362981230987879927244284909188"
    number[17] = "84580156166097919133875499200524063689912560717606"
    number[18] = "05886116467109405077541002256983155200055935729725"
    number[19] = "71636269561882670428252483600823257530420752963450"

    adjacentDigits = 4
    
    var max int

    max = findGreatestProductInRow(number, adjacentDigits)
    fmt.Sprintf("The maximum product in line is : %v", max)

    fmt.Println(max)
    
    max = findGreatestProductInCol(number, adjacentDigits)

    fmt.Println(max)
}

func findGreatestProductInRow(number []string, adjacentDigits int) int {
    var count int
    count = len(number)
    
    var length int
    length = len(number[0]) - adjacentDigits
    
    var max int
    var product int
    
    for row := 0; row < count; row++ {
        for i := 0; i < length; i++ {
            product = countProduct(number[row][i:i+adjacentDigits])
            if product > max {
                max = product
            }
        }
    }
    
    return max
}

func findGreatestProductInCol(number []string, adjacentDigits int) int {
    var count int
    count = len(number)
    
    var length int
    length = len(number[0]) - adjacentDigits
    
    var col int
    var row int
    var max int
    var product int
    
    var productNumber string
    
    for col = 0; col < length; col++ {
        for row = 0; row < count - adjacentDigits; row++ {
            productNumber =""
            for i := 0; i < adjacentDigits; i++ {
                productNumber += number[i][col:col+1]
            }
            product = countProduct(productNumber)
            if product > max {
                max = product
            }
        }
    }
    
    return max
}

func countProduct(number string) int {
    var result int
    result = 1
    for i := 0; i < len(number); i++ {
	num, _ := strconv.Atoi(number[i:i+1])
        result *= num
    }
    return result
}